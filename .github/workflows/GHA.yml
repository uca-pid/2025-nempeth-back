name: CI

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [21]
    name: Test with Java ${{ matrix.java-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests
        run: ./mvnw clean test
        env:
          DB_URL: jdbc:h2:mem:testdb
          DB_USERNAME: sa
          DB_PASSWORD:
          JWT_SECRET: test-secret-for-ci-pipeline-256-bits-minimum-length-required-for-jwt
          SPRING_PROFILES_ACTIVE: test

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Maven Tests
          path: target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: true

      - name: Coveralls GitHub Action
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: test
    runs-on: ubuntu-latest
    name: Build application
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: ./mvnw clean compile package -DskipTests
        env:
          DB_URL: jdbc:h2:mem:testdb
          DB_USERNAME: sa
          DB_PASSWORD:
          JWT_SECRET: test-secret-for-ci-pipeline-256-bits-minimum-length-required-for-jwt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifact
          path: target/*.jar

  security-scan:
    needs: test
    runs-on: ubuntu-latest
    name: Security scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

  deploy-backend:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    name: Deploy to Heroku
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Heroku secrets
        shell: bash
        run: |
          set -euo pipefail
          # Validaciones (no imprimimos los valores, solo longitud)
          [[ -n "${HEROKU_APP_NAME:-}" ]] || { echo "::error::HEROKU_APP_NAME no está seteado"; exit 1; }
          [[ -n "${HEROKU_API_KEY:-}"  ]] || { echo "::error::HEROKU_API_KEY no está seteado";  exit 1; }
          [[ -n "${HEROKU_EMAIL:-}"    ]] || { echo "::error::HEROKU_EMAIL no está seteado";    exit 1; }
          echo "HEROKU_APP_NAME length: ${#HEROKU_APP_NAME}"
          echo "HEROKU_API_KEY length: ${#HEROKU_API_KEY}"

        env:
          HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}

      - name: Configure Git remote and push to Heroku
        shell: bash
        env:
          HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "${HEROKU_EMAIL}"
          git remote remove heroku || true
          git remote add heroku "https://heroku:${HEROKU_API_KEY}@git.heroku.com/${HEROKU_APP_NAME}.git"
          git remote -v
          git push heroku HEAD:main -f
